{"version":3,"sources":["modules/utils.ts","modules/constants.ts","components/PlayNumber.tsx","components/StarsDisplay.tsx","components/PlayAgain.tsx","components/StarMatch.tsx","hooks/useGameState.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["utils","sum","arr","reduce","acc","curr","range","min","max","Array","from","length","_","i","random","Math","floor","randomSumIn","sets","sums","j","len","candidateSet","concat","candidateSum","push","colors","PlayNumber","props","number","status","onNumberClick","style","backgroundColor","onClick","className","Date","now","StarsDisplay","stars","map","id","PlayAgain","gameStatus","color","StarMatch","resetGame","useState","setStars","availableNums","setAvailableNums","candidateNums","setCandidateNums","secondsLeft","setSecondsLeft","useEffect","timerId","setTimeout","clearTimeout","setGameState","newCandidateNumbers","newAvailableNums","filter","n","includes","useGameState","candidatesAreWrong","numberStatus","currentStatus","cn","Game","key","setKey","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","console","log"],"mappings":"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","file":"static/js/main.d302c592.chunk.js","sourcesContent":["// Math science\nconst utils = {\n    // Sum an array\n    sum: (arr:number[]) => arr.reduce((acc:number, curr:number) => acc + curr, 0),\n  \n    // create an array of numbers between min and max (edges included)\n    range: (min: number, max: number) => Array.from({ length: max - min + 1 }, (_, i) => min + i),\n  \n    // pick a random number between min and max (edges included)\n    random: (min: number, max: number) => min + Math.floor(Math.random() * (max - min + 1)),\n  \n    // Given an array of numbers and a max...\n    // Pick a random sum (< max) from the set of all available sums in arr\n    randomSumIn: (arr: number[], max: number) => {\n      const sets:[number[]] = [[]];\n      const sums:number[] = [];\n      for (let i = 0; i < arr.length; i++) {\n        for (let j = 0, len = sets.length; j < len; j++) {\n          const candidateSet = sets[j].concat(arr[i]);\n          const candidateSum = utils.sum(candidateSet);\n          if (candidateSum <= max) {\n            sets.push(candidateSet);\n            sums.push(candidateSum);\n          }\n        }\n      }\n      return sums[utils.random(0, sums.length - 1)];\n    },\n  };\n\nexport {utils};\n","// Color Theme\nconst colors:colorsType = {\n    \"available\": 'lightgray',\n    \"used\": 'lightgreen',\n    \"wrong\": 'lightcoral',\n    \"candidate\": 'deepskyblue',\n  };\n\nexport {colors}","import { colors } from \"../modules/constants\";\n\nfunction PlayNumber(props: PlayNumberProps) {\n  let { number, status, onNumberClick } = props;\n\n  return (\n    <button\n      style={{ backgroundColor:colors[status]}}\n      key={Date.now()+\"-n-\"+number}\n      onClick={() => {\n        onNumberClick(number, status);\n      }}\n      className=\"number\"\n    >\n      {number}\n    </button>\n  );\n}\n\nexport { PlayNumber };\n","import { utils } from \"../modules/utils\";\n\n\nfunction StarsDisplay(props: StarsDisplayProps) {\n  let { stars } = props;\n  return (\n    <>\n      {utils.range(1, stars).map((id) => {\n        return <div key={Date.now()+\"-s-\"+id} className=\"star\" />;\n      })}\n    </>\n  );\n}\n\nexport { StarsDisplay };\n","function PlayAgain(props: any) {\n  let { onClick, gameStatus } = props;\n  return (\n    <div onClick={onClick} className=\"game-done\">\n      <div\n        style={{\n          color: gameStatus === \"lost\" ? \"red\" : \"green\",\n        }}\n\n        className=\"message\"\n      >\n        {gameStatus === \"lost\" ? \"Game Over\" : \"Nice\"}\n      </div>\n      <button>Play Again</button>\n    </div>\n  );\n}\n\nexport { PlayAgain };\n","import { utils } from \"../modules/utils\";\nimport { PlayNumber } from \"./PlayNumber\";\nimport { StarsDisplay } from \"./StarsDisplay\";\nimport { PlayAgain } from \"./PlayAgain\";\nimport { useGameState } from \"../hooks/useGameState\";\n\nconst StarMatch = (props: any) => {\n    const { resetGame } = props;\n    const { stars, availableNums, candidateNums, secondsLeft, setGameState } = useGameState();\n\n    const candidatesAreWrong = utils.sum(candidateNums) > stars;\n    const gameStatus = availableNums.length === 0 ? \"won\" : secondsLeft === 0 ? \"lost\" : \"active\";\n\n    function numberStatus(number: number): any {\n        if (!availableNums.includes(number)) {\n            return \"used\";\n        }\n\n        if (candidateNums.includes(number)) {\n            return candidatesAreWrong ? \"wrong\" : \"candidate\";\n        }\n\n        return \"available\";\n    }\n\n    function onNumberClick(number: number, currentStatus: \"used\" | \"wrong\" | \"candidate\" | \"available\") {\n        if (gameStatus !== \"active\" || currentStatus === \"used\") {\n            return;\n        }\n\n        const newCandidateNumbers = currentStatus === \"available\" ? candidateNums.concat(number) : candidateNums.filter((cn) => cn !== number);\n        setGameState(newCandidateNumbers);\n    }\n\n    return (\n        <div className=\"game\">\n            <div className=\"help\">Pick 1 or more numbers that sum to the number of stars</div>\n            <div className=\"body\">\n                <div className=\"left\">{gameStatus !== \"active\" ? <PlayAgain gameStatus={gameStatus} onClick={resetGame} /> : <StarsDisplay stars={stars} />}</div>\n                <div className=\"right\">\n                    {utils.range(1, 9).map((number) => (\n                        <PlayNumber status={numberStatus(number)} number={number} onNumberClick={onNumberClick} />\n                    ))}\n                </div>\n            </div>\n            <div className=\"timer\">Time Remaining: {secondsLeft}</div>\n        </div>\n    );\n};\n\nexport { StarMatch };\n","import { utils } from \"../modules/utils\";\nimport { useEffect, useState } from \"react\";\n\nfunction useGameState() {\n  const [stars, setStars] = useState(utils.random(1, 9));\n  const [availableNums, setAvailableNums] = useState(utils.range(1, 9));\n  const [candidateNums, setCandidateNums] = useState([] as number[]);\n  const [secondsLeft, setSecondsLeft] = useState(10);\n\n  useEffect(() => {\n    if (secondsLeft > 0 && availableNums.length > 0) {\n      let timerId = setTimeout(function () {\n        setSecondsLeft(secondsLeft - 1);\n      }, 1000);\n      return () => clearTimeout(timerId);\n    }\n  });\n\n  function setGameState(newCandidateNumbers: number[]) {\n    if (utils.sum(newCandidateNumbers) !== stars) {\n      setCandidateNums(newCandidateNumbers);\n    } else {\n      const newAvailableNums: number[] = availableNums.filter(\n        (n) => !newCandidateNumbers.includes(n)\n      );\n      setStars(utils.randomSumIn(newAvailableNums, 9));\n      setAvailableNums(newAvailableNums);\n      setCandidateNums([]);\n    }\n  }\n\n\n  return {\n    stars,\n    availableNums,\n    candidateNums,\n    secondsLeft,\n    setGameState\n  }\n}\n\nexport { useGameState };\n","import \"./App.css\";\nimport { useState } from \"react\";\nimport { StarMatch } from \"./components/StarMatch\";\n\nconst Game = () => {\n  const [key, setKey] = useState(1);\n\nconst resetGame = ()  => setKey(key + 1)\n\n  return <StarMatch key={key} resetGame={resetGame} />;\n};\n\nexport default Game;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App  from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your StartMatch, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}